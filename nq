#!/bin/sh

local_dir="$HOME/.local"
[ -d $HOME/nq/bin ] && bin_dir="$HOME/nq/bin" ||\
    bin_dir="$HOME/.local/bin"
tmp_dir="/tmp/nq"
[ ! -d $bin_dir ] && mkdir -p $bin_dir
[ ! -d $tmp_dir ] && mkdir -p $tmp_dir

# Result: Darwin, Linux
ARCH=`uname -s`

log() { printf "\033[0;32m$1\033[0m\n"; }
link() { printf "\033[0;32m" && ln -sfv $1 $2 && printf "\033[0m"; }
link_dir_bin() {
    directory=$1
    for file in `ls $directory`; do
        link $directory/$file $bin_dir
    done
}

download() {
    log "_dling: $1" 1>&2
    if command -v curl 2>&1 >/dev/null; then
        curl -L -s --progress-bar "$1"
    elif command -v wget 2>&1 >/dev/null; then
        wget $1 -O -
    fi
}


install_go() {
    ver="1.24.0"
    command -v go >/dev/null &&\
        case `go version` in *$ver*) log "go$ver already installed, return" && return;; esac ||\
        log "go is not installed now"

    log "will install go$ver"
    filename=`[ $ARCH = "Darwin" ] &&\
        echo "go$ver.darwin-arm64.tar.gz" ||\
        echo "go$ver.linux-amd64.tar.gz"`
    GODIR="$local_dir/go"
    [ ! -d $GODIR ] && mkdir -p $GODIR || rm -rf "$GODIR/*"
    download "https://dl.google.com/go/$filename" |\
        tar -xz --strip-components 1 -C $GODIR
    link "$GODIR/bin/go" "$bin_dir"
    link "$GODIR/bin/gofmt" "$bin_dir"
}

download_url() {
    # $1: repo, $2: latest_ver, $3: filename
    url="https://github.com/$1/releases/download/$2/$3"
    echo "$url"
}

github_install_logic() {
    curr=`command -v $1 >/dev/null && echo $($2) || echo 'unknown'`
    url="https://api.github.com/repos/$3/releases"
    ver=`download ${url} |\
        grep 'tag_name' | grep -v "nightly" | grep -v -i alpha | grep -v "stable" |\
        head -n 1 | cut -d\" -f4`
    [ "$curr" = "$ver" ] && log "[$1] $ver is the latest, return" && return
    log "[$1] will install $ver, current: $curr"
    $4 $ver $curr
    ls -alh "$bin_dir/$1"
}

install_bat() {
    app=bat
    repo="sharkdp/$app"
    bat_version() {
        echo "v$($app -V|cut -d' ' -f2)"
    }
    bat_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "x86_64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $ver "$app-$ver-$ar.tar.gz"`
        download $url | tar -zx -C $tmp --strip-components 1
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_onekeyd() {
    if [ "$ARCH" != "Darwin" ]; then
        echo "onekeyd is for macOS"
        return 0
    fi

    log "[onekeyd] Check newest release: https://github.com/OneKeyHQ/onekey-bridge/releases"

    ver="2.2.0"
    url="https://github.com/OneKeyHQ/onekey-bridge/releases/download/v$ver/onekey-bridge-$ver.signed.pkg"

    cd $tmp
    curl -L -s $url > onekeyd.pkg
    pkgutil --expand onekeyd.pkg onekeyd
    cd onekeyd/so.onekey.bridge.install.pkg/
    tar -xvf Payload
    mv Applications/Utilities/OneKey\ Bridge/onekeyd_darwin_arm64 ~/.local/bin/onekeyd
}

install_websocat() {
    app=websocat
    repo="vi/$app"
    websocat_version() {
        echo "v$($app -V|cut -d' ' -f2)"
    }
    websocat_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "x86_64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $ver "$app.$ar"`
        download $url > $tmp/$app && chmod +x $tmp/$app
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_lazygit() {
    app=lazygit
    repo="jesseduffield/$app"
    lazygit_version() {
        echo "v$($app -version | egrep -o 'version=.+?,' | cut -d= -f2 | cut -d, -f1)"
    }
    lazygit_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "Darwin_arm64" || echo "Linux_x86_64"`
        url=`download_url $repo $1 "${app}_$(echo $1|cut -c2-100)_$ar.tar.gz"`
        download $url | tar -zx -C $tmp
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_jq() {
    app=jq
    repo="stedolan/jq"
    jq_version() {
        echo "jq-$(jq --version|head -n 1|cut -d "-" -f2)"
    }
    jq_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "osx-amd64" || echo "linux64"`
        url=`download_url $repo $1 "jq-$ar"`
        download $url > "$tmp/$app"
        mv "$tmp/$app" "$bin_dir"
        chmod +x "$bin_dir/$app"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_zoxide() {
    app=zoxide
    repo="ajeetdsouza/zoxide"
    zoxide_version() {
        echo `zoxide -V|cut -d " " -f2`
    }
    zoxide_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "aarch64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $1 "zoxide-$(echo $1|cut -c2-100)-$ar.tar.gz"`
        log "url: $url"
        download $url | tar -zx -C $tmp
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_fzf() {
    app=fzf
    repo="junegunn/fzf"
    fzf_version() {
        echo `fzf --version|cut -d " " -f1`
    }
    fzf_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "darwin_arm64.tar.gz" || echo "linux_amd64.tar.gz"`
        url=`download_url $repo $1 "fzf-$(echo $1|cut -c2-100)-$ar"`
        download $url | tar -zx -C $tmp
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_rg() {
    app=rg
    repo="BurntSushi/ripgrep"
    rg_version() {
        echo `rg -V|cut -d " " -f2`
    }
    rg_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "x86_64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $1 "ripgrep-${1}-$ar.tar.gz"`
        download $url | tar -zx -C $tmp --strip-components=1
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_restic() {
    app=restic
    repo="restic/restic"
    restic_version() {
        echo `restic version | cut -d " " -f2`
    }
    restic_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "darwin_arm64" || echo "linux_amd64"`
        url=`download_url $repo $1 "restic_$(echo $1|cut -c2-100)_$ar.bz2"`
        download $url | bunzip2 > $tmp/restic
        chmod +x $tmp/restic
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_alist() {
    app=alist
    repo="alist-org/alist"
    alist_version() {
        echo `alist version|grep -e '^Version: '|cut -d " " -f2`
    }
    alist_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "darwin-arm64" || echo "linux-amd64"`
        url=`download_url $repo $1 "alist-$ar.tar.gz"`
        download $url | tar -zx -C $tmp
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_mihomo() {
    app=mihomo
    repo="MetaCubeX/mihomo"
    mihomo_version() {
        echo `mihomo -v |grep "Meta" | cut -d " " -f3`
    }
    mihomo_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "darwin-arm64" || echo "linux-amd64"`
        url=`download_url $repo $1 "mihomo-$ar-go120-${1}.gz"`
        download $url | gzip -d -c > $tmp/$app
        mv "$tmp/$app" "$bin_dir" && chmod +x "$bin_dir/$app"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_watchexec() {
    app=watchexec
    repo=watchexec/watchexec
    watchexec_version() {
        echo v`watchexec -V|cut -d " " -f2`
    }
    watchexec_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "aarch64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $1 "watchexec-$(echo $1|cut -c2-100)-$ar.tar.xz"`
        download $url | tar -C $tmp --strip-components=1 -xJf -
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_fd() {
    app=fd
    repo="sharkdp/fd"
    fd_version() {
        echo "v`fd -V|cut -d" " -f2`"
    }
    fd_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "x86_64-apple-darwin" || echo "i686-unknown-linux-musl"`
        url=`download_url $repo $1 "fd-$1-$ar.tar.gz"`
        download $url | tar -zx -C $tmp --strip-components=1
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_lsd() {
    app=lsd
    repo=Peltoche/lsd
    lsd_version() {
        echo "`lsd -V|cut -d" " -f2`"
    }
    lsd_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "aarch64-apple-darwin" || echo "i686-unknown-linux-musl"`
        url=`download_url $repo $1 "lsd-${1}-$ar.tar.gz"`
        download $url | tar -zx -C $tmp --strip-components=1
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_dust() {
    app=dust
    repo=bootandy/dust
    dust_version() {
        echo "v`dust -V|cut -d" " -f2`"
    }
    dust_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "x86_64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $1 "dust-${1}-$ar.tar.gz"`
        download $url | tar -zx -C $tmp --strip-components=1
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_aichat() {
    app=aichat
    repo=sigoden/aichat
    aichat_version() {
        echo "v`aichat -V|cut -d" " -f2`"
    }
    aichat_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "aarch64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $1 "aichat-${1}-$ar.tar.gz"`
        download $url | tar -zx -C $tmp #--strip-components=1
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_grpcurl() {
    app=grpcurl
    repo=fullstorydev/grpcurl
    grpcurl_version() {
        echo "`grpcurl -version 2>&1|cut -d" " -f2`"
    }
    grpcurl_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "osx_arm64" || echo "linux_x86_64"`
        url=`download_url $repo $1 "grpcurl_$(echo $1|cut -c2-100)_$ar.tar.gz"`
        download $url | tar -zx -C $tmp
        mv "$tmp/$app" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_nvim() {
    app=nvim
    repo="neovim/neovim"
    nvim_version() {
        echo `nvim -v|head -n 1|cut -d " " -f2`
    }
    nvim_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "macos-arm64" || echo "linux-x86_64"`
        url=`download_url $repo $1 "nvim-$ar.tar.gz"`
        download $url | tar -zx -C $tmp --strip-components=1
        rm -rf "$local_dir/nvim" && cp -r "$tmp" "$local_dir/nvim"
        link "../nvim/bin/nvim" "$bin_dir/nvim"
        link "../nvim/bin/nvim" "$bin_dir/vim"
        link "../nvim/bin/nvim" "$bin_dir/view"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

nn() {
    default_ver="22.14.0"
    [ -n "$2" ] && ver="$2" || ver=$default_ver
    node_root="$local_dir/node"; node_path="$node_root/$ver"
    case $1 in
        list) log "Current: $(node -v)"; for ver in `ls $node_root`; do echo "  - $ver"; done;;
        install) [ -d "$node_path" ] && log "[node] v$ver installed, return" && return
            filename=`[ "$ARCH" = "Darwin" ] &&\
                echo "node-v$ver-darwin-arm64.tar.gz" ||\
                echo "node-v$ver-linux-x64.tar.gz"`
            url="https://nodejs.org/dist/v$ver/$filename"
            mkdir -p $node_path
            download $url | tar -zx -C $node_path --strip-components=1
            nn use $ver;;
        rm) rm -rf $node_path;;
        use) rm -f "$bin_dir/node" &&\
            link "$local_dir/node/$ver/bin" "$bin_dir/node";;
        *) echo "  nn list"
           echo "  nn use [ver default:$default_ver]"
           echo "  nn install [ver default:$default_ver]"
           echo "  nn rm [ver default:$default_ver]"
           echo ""
           echo "  https://github.com/nodejs/Release?tab=readme-ov-file"
           echo "  https://nodejs.org/en/about/previous-releases"
           echo "" && nn list;;
    esac
}

install_node() {
    nn install
}

install_conda() {
    command -v conda >/dev/null && log "[conda] exist, return" && return
    base_url="https://github.com/conda-forge/miniforge/releases/latest/download"
    
    filename=`[ $ARCH = "Darwin" ] &&\
        echo "Miniforge3-MacOSX-arm64.sh" ||\
        echo "Miniforge3-Linux-x86_64.sh"`
    download "$base_url/$filename" > "$tmp/conda.sh"
    sh "$tmp/conda.sh" -b -f -s -p "$local_dir/conda"
}

install_uv() {
    app=uv
    repo="astral-sh/uv"
    uv_version() {
        echo `uv version|cut -d " " -f2`
    }
    uv_install() {
        ar=`[ $ARCH = "Darwin" ] && echo "aarch64-apple-darwin" || echo "x86_64-unknown-linux-musl"`
        url=`download_url $repo $1 "uv-$ar.tar.gz"`
        download $url | tar -zx -C $tmp --strip-components=1
        mv "$tmp/$app" "$bin_dir"
        mv "$tmp/uvx" "$bin_dir"
    }
    github_install_logic $app ${app}_version $repo ${app}_install
}

install_config() {
    conf_dir="$HOME/.config/nq/config"
    link "$conf_dir/gitconfig" "$HOME/.gitconfig"
    link "$conf_dir/profile" "$HOME/.zshrc"
    link "$conf_dir/tmux.conf" "$HOME/.tmux.conf"
    rm -rf "$HOME/.ctags.d" && mkdir "$HOME/.ctags.d" && \
        link "$conf_dir/ctags" "$HOME/.ctags.d/default.ctags"
}

install_zplug() {
    plugins="https://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\
        https://github.com/zsh-users/zsh-autosuggestions/archive/master.tar.gz"
    for item in $plugins; do
        name=`echo $item|cut -d "/" -f5`
        [ -d "$local_dir/$name" ] && rm -rf "$local_dir/$name"
        mkdir -p $local_dir/$name
        download $item | tar -zx -C $local_dir/$name --strip-components=1
    done
}

install_vimrc() {
    plug_file="$HOME/.vim/autoload/plug.vim"
    [ ! -f $plug_file ] && curl --progress-bar -fLo $plug_file --create-dirs \
        "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

    conf_dir="$HOME/.config/nq/config"
    link "$conf_dir/vimrc" "$HOME/.vimrc"

    [ ! -d "$HOME/.config/nvim" ] && mkdir -p "$HOME/.config/nvim"

    nvimrc="$HOME/.config/nvim/init.vim" && rm -f $nvimrc
    echo "set runtimepath^=~/.vim" > $nvimrc
    echo "let &packpath = &runtimepath" >> $nvimrc
    echo "source $conf_dir/vimrc" >> $nvimrc

    command -v nvim >/dev/null &&\
        nvim +PlugInstall +qall ||\
        vim +PlugInstall +qall
}

install_ctags() {
    if [ "$ARCH" = "Darwin" ]; then
        brew install universal-ctags
        return
    fi

    git clone https://github.com/universal-ctags/ctags.git $tmp --depth=1
    cd $tmp
    log "configure ctags ..."
    ./autogen.sh >/dev/null
    ./configure --prefix="$tmp" >/dev/null
    log "make ctags ..."
    make -j`nproc` >/dev/null
    make install >/dev/null
    cp $tmp/bin/* "$bin_dir"
    cd -
}

install_chtsh() {
    download https://cht.sh/:cht.sh > "$bin_dir/chtsh"
    chmod +x "$bin_dir/chtsh"
}

install_brew() {
    log "install Xcode command line tools..."
    xcode-select --install
    log "install brew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

install_rust() {
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path -y
}

set -e
all_items() {
    while read -r line; do
        case $line in
            "install_"*) item=`echo ${line#install_} | cut -d '(' -f1`;
                funcs="$funcs$item,";;
        esac
    done <<EOF
`egrep '^install_' $0`
EOF
    echo "${funcs%,}"
}

handle_item_install() {
    item=$1
    log "[$item] start install..."
    tmp="$tmp_dir/$item" && mkdir -p $tmp
    install_$1
    rm -rf "$tmp"
}

normal_apps="jq,zoxide,fzf,rg,fd,lsd,zplug,config,vimrc"

if ! test -z "$1" && egrep -q "^install_$1" $0; then
    handle_item_install $1
elif [ "$1" = "all" ]; then
    items=`all_items`
    for item in $(echo $items | sed 's/,/ /g'); do
        ignore_apps='brew,ctags,rust,' 
        if echo $ignore_apps | grep -q "$item,"; then
            continue
        fi
        handle_item_install $item
    done
elif [ "$1" = "normal" ]; then
    for item in $(echo $normal_apps | sed 's/,/ /g'); do
        handle_item_install $item
    done
elif echo "$1" | grep -q ','; then
    for item in $(echo $1 | sed 's/,/ /g'); do
        handle_item_install $item
    done
else
    echo '`nq normal` to install:'
    log "$normal_apps"
    echo '`nq all` to install:'
    items=`all_items`
    log "$items"
fi

