#!/usr/bin/env python3
import argparse
import os
import re
import shutil
import subprocess
import sys
from shutil import which
from urllib.parse import urlparse


class bcolors:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


def _run(cmd):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
    stdout, stderr = p.communicate()
    return (
        stdout.decode("utf-8").strip() if stdout else "",
        stderr.decode("utf-8").strip() if stderr else "",
    )


def parse_remote(remote_url):
    if remote_url.startswith("git@"):
        ptn = "git@(?P<host>.+):(?P<username>[\w\d]+)/(?P<repo>[\w\d]+)"
        r = re.match(ptn, remote_url).groupdict()
        remote_url = f"https://{r['host']}/{r['username']}/{r['repo']}"
    elif remote_url.startswith("ssh://"):
        # ssh://git@gitlab.fish:1022/f2pool/node_images/kas.git
        remote_url = remote_url.replace("ssh://git@", "https://").replace(":1022/", "/").replace(".git", "")
    remote_url = remote_url.strip("/")
    return remote_url


def get_url(path, remotes):
    base_dir = path
    while len(base_dir) > 2:
        if os.path.exists(os.path.join(base_dir, ".git")):
            break
        base_dir = os.path.dirname(base_dir)
    if len(base_dir) < 3:
        print("Not in a git repository")
        sys.exit(-1)

    related_path = path.replace(base_dir, "")
    branch, _ = _run("git rev-parse --abbrev-ref HEAD")
    if "heads/" in branch:
        branch = branch.replace("heads/", "")

    urls = {}
    for remote in remotes:
        stdout, _ = _run(f"git config --get remote.{remote}.url")
        remote_url = stdout[:-4] if stdout.endswith(".git") else stdout
        remote_url = parse_remote(remote_url)
        urls[remote] = f"{remote_url}/tree/{branch}{related_path}"

    for obj in urls:
        print(f"{bcolors.HEADER}{obj}:\t{urls[obj]}{bcolors.ENDC}")
        base_url = urls[obj].split("/tree/")[0]
        if "gitlab" in base_url:
            print(f"  - overview:\t{base_url}")
            print(f"  - pipelines:\t{base_url}/-/pipelines")
            print(f"  - tags:\t{base_url}/-/tags")
            print(f"  - merge reqs:\t{base_url}/-/merge_requests")
        elif "github" in base_url:
            print(f"  - overview:\t{base_url}")

    if which("open"):
        url = urls["fish"] if "fish" in urls else urls["origin"]
        _run(f"open {url}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--download", "-d", default="", type=str, help="Specify URL to download")
    parser.add_argument(
        "--research",
        "-r",
        nargs="*",
        help="Clone in repo in ~/go/src/research folder",
    )
    parser.add_argument("--depth", default=None, help="Clone depth of this repo")
    args = parser.parse_args()
    if args.download:
        remote_url = args.download
        if remote_url.startswith("git@"):
            remote_url = "ssh://" + remote_url.replace(":", "/")
        uri = urlparse(remote_url)
        print("Remote url:", uri)
        if isinstance(args.research, list):
            base = ["research"] if len(args.research) == 0 else ["research", args.research[0]]
            base.append(uri.path.replace(".git", "").strip("/").split("/")[-1])
            dest = os.path.join(*base)
        else:
            path = uri.path.replace(".git", "").strip("/")
            dest = os.path.join(uri.hostname.strip("/"), path)
        dest = os.path.join(os.environ.get("HOME", ""), "go/src", dest)
        print("Will clone into:", dest)
        if os.path.exists(dest):
            print("Destination already exists")
            sys.exit(0)
        d = os.path.dirname(dest)
        if not os.path.exists(d):
            os.makedirs(d)
        cmd = f"git clone "
        if args.depth is not None:
            cmd += f"--depth {args.depth} "
        cmd += f"{remote_url} {dest}"
        _run(cmd)
        if shutil.which("zoxide"):
            _run(f"zoxide add {dest}")
    else:
        cwd = os.getcwd()
        path = cwd if len(sys.argv) < 2 else os.path.join(cwd, os.path.expanduser(sys.argv[1]))
        remotes, _ = _run("git remote")
        get_url(path, remotes.splitlines())
