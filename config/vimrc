set encoding=utf-8
let mapleader = "\<space>"

set nocompatible hidden wrap
set hlsearch incsearch ignorecase smartcase
set backspace=indent,eol,start
set completeopt=menu,menuone,noselect
set noswapfile nobackup nowritebackup
set cindent autoindent smartindent expandtab smarttab
set nu signcolumn=number laststatus=1 cursorline ruler
set autoread autowrite mouse=a
set ts=4 sw=4 sts=4 scrolloff=3
set statusline=%F\ %h%w%m%r%=%-14.(%l/%L,%c%V%)\ %P
set wildignore+=.bak,*.swp,*.class,*.pyc,*DS_Store*,*.swp,

nnoremap <C-c> :q<CR>
nnoremap -     :Explore<CR>
nnoremap [q    :cprevious<CR>
nnoremap ]q    :cnext<CR>

inoremap <C-b> <left>
cnoremap <C-b> <left>
inoremap <C-f> <right>
cnoremap <C-f> <right>
inoremap <C-a> <home>
cnoremap <C-a> <home>
inoremap <C-e> <end>
cnoremap <C-e> <end>

nnoremap j gj
nnoremap k gk
vnoremap < <gv
vnoremap > >gv

" Plugins
set rtp+=~/.vim
if empty(glob('~/.vim/autoload/plug.vim'))
    execute '!curl --silent -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
if !empty(glob($HOME..'/nq/bin'))
    let $PATH = $HOME..'/nq/bin:'..$PATH
endif
silent! call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf',
Plug 'junegunn/fzf.vim',
Plug 'ludovicchabant/vim-gutentags'
Plug 'tpope/vim-commentary',
Plug 'tpope/vim-surround',
Plug 'tpope/vim-fugitive',
Plug 'jiangmiao/auto-pairs',
Plug '907th/vim-auto-save',
Plug 'sbdchd/neoformat',
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'wellle/targets.vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'skywind3000/asyncrun.vim'

Plug 'neoclide/coc.nvim', {'branch': 'release', 'on': []}
Plug 'antoinemadec/coc-fzf', {'on': []}
Plug 'honza/vim-snippets', {'on': []}
Plug 'github/copilot.vim', {'on': []}
Plug 'Mofiqul/vscode.nvim', {'on': []}
silent! call plug#end()

let g:gutentags_enabled = 0
let g:gutentags_project_root = ['.root', '.git']
let g:gutentags_ctags_tagfile = '.tags'
let s:vim_tags = expand('~/.vim/tags')
let g:gutentags_cache_dir = s:vim_tags
let g:gutentags_modules = ['ctags']
let g:gutentags_exclude_filetypes = ['markdown']
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

nnoremap = :Neoformat<CR>
let g:neoformat_basic_format_align = 1
let g:neoformat_basic_format_trim = 1
let g:neoformat_python_black = {
    \ 'exe': 'black',
    \ 'stdin': 1,
    \ 'args': ['--line-length=120', "-q", "-"],
    \ }
let g:neoformat_python_iosrt = {
    \ 'exe': 'isort',
    \ 'args': ['--profile=black'],
    \ }
let g:neoformat_enabled_python = ['isort', 'black']
let g:neoformat_rust_rustfmt = {
    \ 'exe': 'rustfmt',
    \ 'args': ['--emit=stdout', '--edition=2021'],
    \ }

let g:auto_save = 1
let g:netrw_dirhistmax = 0

command! -bang -nargs=* FRg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case --fixed-strings -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* BRg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case --fixed-strings -g '.shellescape(expand('%')).' -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

noremap  <c-j>      :<C-U>call fzf#vim#files('')<CR>
noremap  <c-h>      :<C-U>call fzf#vim#history()<CR>
nnoremap <leader>m  :<C-U>call fzf#vim#marks()<CR>
nnoremap <leader>n  :<C-U>Commands<CR>
nnoremap <leader>t  :<C-U>BTags<CR>
nnoremap <leader>y  :<C-U>Tags<CR>
nnoremap <leader>h  :<C-U>Helptags<CR>
nnoremap <leader>r  y:<C-U><C-R>=printf("Tags %s", expand("<cword>"))<CR>
nnoremap <leader>w  y:<C-U><C-R>=printf("FRg %s", expand("<cword>"))<CR>
nnoremap <leader>s  :<C-U><C-R>=printf("FRg ")<CR>
nnoremap <leader>j  :History:<CR>
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_commits_log_options =  "-200 --color=always"
let g:fzf_preview_window = ['up:80%', 'ctrl-/']

function! s:GoToWorkspace(directory)
    execute 'cd '.a:directory
    execute 'Files'
    if exists(":CocRestart") | execute 'CocRestart' | endif
endfunction
command! Workspaces call fzf#run(fzf#wrap({
      \ 'source': 'zoxide query -l',
      \ 'sink': function('s:GoToWorkspace'),
      \ 'options': '--prompt "Workspace> " '
      \ }))

command! Lg execute '!tmux popup -d "\#{pane_current_path}" -xC -yC -w99\% -h99\% -E "zsh -i -c lazygit"'


" Custom scripts
function! CreatePlayGround(fileName)
    let l:directory = expand('~/.config/playground')
    if !isdirectory(l:directory)
        call mkdir(l:directory)
    endif
    let l:ext = fnamemodify(a:fileName, ':e')
    if index(["go", "py"], l:ext) < 0
        echo "Only go,py supported. You typed: ".l:ext
        return
    endif
    exe 'edit '.l:directory.'/'.a:fileName
endfunction
command! -nargs=1 CreatePlayGround call CreatePlayGround(<f-args>)


" Auto cmd group
augroup vimrc
    au FileType javascript,html,vue setlocal sw=2 ts=2 sts=2
    au FileType qf,git,term,fzf setlocal nonu nornu
    au FileType python let b:neoformat_run_all_formatters = 1
    au FileType fzf set laststatus=0 noshowmode noruler
        \| au BufLeave <buffer> set laststatus=1 showmode ruler
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif
augroup END


" Theme
function! ApplyTheme()
    for g in ['Normal', 'EndOfBuffer', 'LineNr', "Directory"]
        exe "hi ".g." ctermbg=NONE guibg=NONE" | endfor
    hi clear CursorLine
    hi CursorLine ctermbg=237 guibg=#386641
    hi LineNr ctermfg=238 ctermbg=NONE guifg=#386641 guibg=NONE
    hi SpellBad ctermbg=17 guibg=#959595
    hi StatusLine ctermbg=208 guibg=#6a994e
    hi StatusLineNC ctermbg=94 guibg=#6d6875
    hi Search ctermbg=240 guibg=#03045e
    hi Visual ctermbg=240 guibg=#03045e
    hi VisualNOS ctermbg=240 guibg=#03045e
    hi PmenuSel ctermbg=22 ctermfg=255 guibg=#03045e guifg=#ffffff
endfunction
call ApplyTheme()

"
" Lsp using coc
function! LoadLsp()
    call plug#load('coc.nvim', 'coc-fzf', 'vim-snippets', 'vscode.nvim')

    let g:coc_global_extensions = [
        \ "coc-typos",
        \ "coc-go",
        \ "coc-pyright",
        \]
    let g:coc_fzf_preview = 'up:80%'
    let g:coc_fzf_opts = ['--layout=default']
    imap <C-l> <Plug>(coc-snippets-expand-jump)

    inoremap <silent><expr> <TAB>
          \ coc#pum#visible() ? coc#pum#next(1) :
          \ CheckBackspace() ? "\<Tab>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

    inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " typos
    nmap ]s <Plug>(coc-typos-next)
    nmap [s <Plug>(coc-typos-prev)
    nmap z= <Plug>(coc-typos-fix)

    nnoremap gk :<C-u>call CocActionAsync('doHover')<CR>
    nnoremap gd :<C-u>call CocActionAsync('jumpDefinition')<CR>
    nnoremap gt :<C-u>call CocActionAsync('jumpTypeDefinition')<CR>
    nnoremap gi :<C-u>call CocActionAsync('jumpImplementation')<CR>
    nnoremap gr :<C-u>call CocActionAsync('jumpReferences')<CR>
    nnoremap gs :<C-u>call CocActionAsync('showSignatureHelp')<CR>

    nnoremap ge :<C-u>call CocActionAsync('codeAction', 'cursor')<CR>
    nnoremap ga :<C-u>call CocActionAsync('refactor')<CR>
    nnoremap gf :<C-u>call CocActionAsync('doQuickfix')<CR>

    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

    inoremap <expr> <c-n> coc#pum#visible() ? coc#pum#next(1): coc#refresh()
    inoremap <expr> <c-p> coc#pum#visible() ? coc#pum#prev(1): "\<c-p>"
    inoremap <expr> <cr>  coc#pum#visible() ? coc#_select_confirm() : "\<CR>"
    inoremap <expr> <c-space> coc#refresh()

    nnoremap <leader>a   :<C-u>CocFzfList diagnostics --current-buf<CR>
    nnoremap <leader>c   :<C-u>CocFzfList commands<CR>
    nnoremap <leader>l   :<C-u>CocFzfList<CR>

    nnoremap <leader>t  :<C-u>CocFzfList outline<CR>
    nnoremap <leader>y  :<C-u>CocFzfList symbols<CR>

    lua require("vscode").setup({}); require("vscode").load()
    call ApplyTheme()
    echo "Lsp Loaded"
endfunction

command! LoadLsp exe 'call LoadLsp()'
command! LoadCopilot exe 'call plug#load("copilot.vim")'

if has("nvim")
    LoadLsp
    LoadCopilot
endif
