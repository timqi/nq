"if get(s:, 'loaded', 0) != 0 | finish | else | let s:loaded = 1 | endif
set encoding=utf-8 fileencodings=utf-8,ucs-bom,gbk,gb18030,big5,euc-jp,latin1
let mapleader = "\<space>"

set nocompatible hidden wrap
set hlsearch incsearch ignorecase smartcase
set backspace=indent,eol,start
set completeopt=menu,preview
set noswapfile nobackup nowritebackup
set cindent autoindent smartindent expandtab smarttab
set nu signcolumn=number laststatus=1 mouse=v cursorline
set wildignore+=.bak,*.swp,*.class,*.pyc,*DS_Store*,*.swp,*/.Trash/*
set updatetime=1000
set autoread autowrite
set ts=4 sw=4 sts=4 scrolloff=3
set statusline=%F\ %h%w%m%r%=%-14.(%l,%c%V%)\ %P

syntax on
filetype plugin indent on
nnoremap <c-c> :q<cr>
nnoremap - :Explore<cr>
for [k, v] in items({"<c-b>": "<left>", "<c-f>": "<right>",
\"<c-a>": "<home>","<c-e>": "<end>", "<c-d>": "<del>"})
    exe "inoremap ".k." ".v | exe "cnoremap ".k." ".v
endfor

silent! call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'Raimondi/delimitMate'
Plug '907th/vim-auto-save'
Plug 'sbdchd/neoformat'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-commentary'
Plug 'skywind3000/asyncrun.vim'
Plug 'tomasiser/vim-code-dark'

Plug 'neoclide/coc.nvim', {'branch': 'release', 'on': []}
Plug 'antoinemadec/coc-fzf', {'on': []}
Plug 'honza/vim-snippets', {'on': []}
Plug 'github/copilot.vim', {'on': []}
silent! call plug#end()

"let g:netrw_liststyle = 3
let g:asyncrun_open = 8
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

nnoremap = :Neoformat<cr>
let g:neoformat_basic_format_align = 1
let g:neoformat_basic_format_trim = 1
let g:neoformat_python_iosrt = {
    \ 'exe': 'isort',
    \ 'args': ['--profile=black'],
    \ }
let g:neoformat_enabled_python = ['isort', 'black']
au FileType python let b:neoformat_run_all_formatters = 1
let g:neoformat_rust_rustfmt = {
    \ 'exe': 'rustfmt',
    \ 'args': ['--emit=stdout', '--edition=2021'],
    \ }

let g:auto_save = 1
let g:netrw_dirhistmax = 0

noremap  <c-j>      :<C-U>call fzf#vim#files('')<CR>
noremap  <c-h>      :<C-U>call fzf#vim#history()<CR>
nnoremap <leader>m  :<C-U>call fzf#vim#marks()<CR>
nnoremap <leader>n  :<C-U>Commands<CR>
nnoremap <leader>t  :<C-U>BTags<CR>
nnoremap <leader>y  :<C-U>Tags<CR>
nnoremap <leader>h  :<C-U>Helptags<CR>
nnoremap <leader>r  y:<C-U><C-R>=printf("Tags %s", expand("<cword>"))<CR>
nnoremap <leader>w  y:<C-U><C-R>=printf("Rg %s", expand("<cword>"))<CR>
nnoremap <leader>s  :<C-U><C-R>=printf("Rg ")<CR>
nnoremap <leader>j  :History:<CR>
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_commits_log_options =  "-200 --color=always"
let g:fzf_preview_window = ['up:80%', 'ctrl-/']


function! LoadLsp()
    call plug#load('coc.nvim', 'coc-fzf', 'vim-snippets')

    let g:coc_global_extensions = [
        \ "coc-typos",
        \ "coc-snippets",
        \ "coc-go",
        \ "coc-pyright",
        \]
    let g:coc_fzf_preview = 'up:80%'
    let g:coc_fzf_opts = ['--layout=default']
    imap <C-l> <Plug>(coc-snippets-expand-jump)

    " typos
    nmap ]s <Plug>(coc-typos-next)
    nmap [s <Plug>(coc-typos-prev)
    nmap z= <Plug>(coc-typos-fix)

    nnoremap gk :<C-u>call CocActionAsync('doHover')<CR>
    nnoremap gd :<C-u>call CocActionAsync('jumpDefinition')<CR>
    nnoremap gt :<C-u>call CocActionAsync('jumpTypeDefinition')<CR>
    nnoremap gi :<C-u>call CocActionAsync('jumpImplementation')<CR>
    nnoremap gr :<C-u>call CocActionAsync('jumpReferences')<CR>
    nnoremap gs :<C-u>call CocActionAsync('showSignatureHelp')<CR>

    nnoremap ge :<C-u>call CocActionAsync('codeAction', 'cursor')<CR>
    nnoremap ga :<C-u>call CocActionAsync('refactor')<CR>
    nnoremap gf :<C-u>call CocActionAsync('doQuickfix')<CR>

    nnoremap <leader>a   :<C-u>CocFzfList diagnostics --current-buf<CR>
    nnoremap <leader>c   :<C-u>CocFzfList commands<CR>
    nnoremap <leader>l   :<C-u>CocFzfList<CR>

    noremap <nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    noremap <nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

    inoremap <expr> <c-n> coc#pum#visible() ? coc#pum#next(1): coc#refresh()
    inoremap <expr> <c-p> coc#pum#visible() ? coc#pum#prev(1): "\<c-p>"
    inoremap <expr> <cr>  coc#pum#visible() ? coc#_select_confirm() : "\<CR>"
    inoremap <expr> <c-space> coc#refresh()

    echo "Lsp Loaded"
endfunction

command! LoadLsp exe 'call LoadLsp()'
command! LoadCopilot exe 'call plug#load("copilot.vim")'

function! CreatePlayGround(fileName)
    let l:directory = expand('~/.config/playground')
    if !isdirectory(l:directory)
        call mkdir(l:directory)
    endif
    let l:ext = fnamemodify(a:fileName, ':e')
    if index(["go", "py"], l:ext) < 0
        echo "Only go,py supported. You typed: ".l:ext
        return
    endif
    exe 'edit '.l:directory.'/'.a:fileName
endfunction
command! -nargs=1 CreatePlayGround call CreatePlayGround(<f-args>)

function! s:GoToWorkspace(directory)
    execute 'cd '.a:directory
    execute 'Files'
    if exists(":CocRestart") | execute 'CocRestart' | endif
endfunction
command! Workspaces call fzf#run(fzf#wrap({
      \ 'source': 'zoxide query -l',
      \ 'sink': function('s:GoToWorkspace'),
      \ 'options': '--prompt "Workspace> " '
      \ }))

command! Lg execute '!tmux popup -d "\#{pane_current_path}" -xC -yC -w99\% -h99\% -E "zsh -i -c lazygit"'


augroup vimrc
    au FileType javascript,html,vue setlocal sw=2 ts=2 sts=2
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif
    au FileType python nnoremap <leader>b :AsyncRun python %<cr>
    au FileType go nnoremap <leader>b :AsyncRun go run %<cr>
    au FileType json syntax match Comment +\/\/.\+$+
augroup END


try | colorscheme codedark | catch /.*/ | endtry
for g in ['Normal', 'EndOfBuffer', 'LineNr', "Directory"]
    exe "hi ".g." ctermbg=NONE guibg=NONE" | endfor
hi clear CursorLine
hi CursorLine ctermbg=237 guibg=#386641
hi LineNr ctermfg=238
hi SpellBad ctermbg=17
hi StatusLine ctermbg=58 guibg=#6a994e
hi StatusLineNC ctermbg=244 guibg=#6d6875
hi Search ctermbg=240 guibg=#03045e
hi Visual ctermbg=240 guibg=#03045e
hi VisualNOS ctermbg=240 guibg=#03045e
hi PmenuSel ctermbg=22 guibg=#03045e ctermfg=255 guifg=#ffffff

