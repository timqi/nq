"if get(s:, 'loaded', 0) != 0 | finish | else | let s:loaded = 1 | endif
set encoding=utf-8 fileencodings=utf-8,ucs-bom,gbk,gb18030,big5,euc-jp,latin1
let mapleader = "\<space>"

set nocompatible hidden wrap
set hlsearch incsearch ignorecase smartcase
set backspace=indent,eol,start
set completeopt=menu,preview
set noswapfile nobackup nowritebackup
set cindent autoindent smartindent expandtab smarttab
set nu signcolumn=number laststatus=1 mouse=v cursorline
set wildignore+=.bak,*.swp,*.class,*.pyc,*DS_Store*,*.swp,*/.Trash/*
set updatetime=1000
set autoread ts=4 sw=4 sts=4
au FileType javascript,html,vue setlocal sw=2 ts=2 sts=2

syntax on
filetype plugin indent on
nnoremap <c-c> :q<cr>
nnoremap - :Explore<cr>
for [k, v] in items({"<c-b>": "<left>", "<c-f>": "<right>",
\"<c-a>": "<home>","<c-e>": "<end>", "<c-d>": "<del>"})
    exe "inoremap ".k." ".v | exe "cnoremap ".k." ".v
endfor

au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

call plug#begin('~/.vim/plugged')
Plug 'tomasiser/vim-code-dark'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'jiangmiao/auto-pairs'
Plug '907th/vim-auto-save'
Plug 'sbdchd/neoformat'
nnoremap = :Neoformat<cr>
let g:neoformat_basic_format_align = 1
let g:neoformat_basic_format_trim = 1
let g:neoformat_rust_rustfmt = {
    \ 'exe': 'rustfmt',
    \ 'args': ['--emit=stdout', '--edition=2021'],
    \ 'stdin': 1
    \ }

let g:auto_save = 1
let g:netrw_dirhistmax = 0
let g:tmux_navigator_save_on_switch = 2

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
noremap  <c-e>      :<C-U>call fzf#vim#history()<CR>
noremap  <c-p>      :<C-U>call fzf#vim#files('')<CR>
nnoremap <leader>m  :<C-U>call fzf#vim#marks()<CR>
nnoremap <leader>t  :<C-U>BTags<CR>
nnoremap <leader>y  :<C-U>Tags<CR>
nnoremap <leader>h  :<C-U>Helptags<CR>
nnoremap <leader>r  y:<C-U><C-R>=printf("Tags %s", expand("<cword>"))<CR>
nnoremap <leader>w  y:<C-U><C-R>=printf("Rg %s", expand("<cword>"))<CR>
nnoremap <leader>s  :<C-U><C-R>=printf("Rg ")<CR>
nnoremap <leader>j  :History:<CR>
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_commits_log_options =  "-200 --color=always"
let g:fzf_preview_window = ['up:80%', 'ctrl-/']
let g:fzf_history_dir = '~/.fzf'

Plug 'TovarishFin/vim-solidity'
Plug 'leafgarland/typescript-vim'


if has("nvim")
Plug 'tpope/vim-commentary'
Plug 'github/copilot.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = ["coc-go", "coc-pyright", "coc-typos"]
Plug 'antoinemadec/coc-fzf'
let g:coc_fzf_preview = 'up:80%'
let g:coc_fzf_opts = ['--layout=default']

" typos
nmap ]s <Plug>(coc-typos-next)
nmap [s <Plug>(coc-typos-prev)
nmap z= <Plug>(coc-typos-fix)

nnoremap K           :<C-u>call CocActionAsync('doHover')<CR>
nnoremap L           :<C-u>call CocActionAsync('showSignatureHelp')<CR>
nnoremap gt          :<C-u>call CocActionAsync('jumpTypeDefinition')<CR>
nnoremap gi          :<C-u>call CocActionAsync('jumpImplementation')<CR>
nnoremap gr          :<C-u>call CocActionAsync('jumpReferences')<CR>
nnoremap qf          :<C-u>call CocActionAsync('doQuickfix')<CR>
nnoremap gd          :<C-u>call CocActionAsync('jumpDefinition')<CR>
nnoremap <leader>rn  :<C-u>call CocActionAsync('rename')<CR>

nnoremap <leader>a   :<C-u>CocFzfList diagnostics --current-buf<CR>
nnoremap <leader>c   :<C-u>CocFzfList commands<CR>
nnoremap <leader>l   :<C-u>CocFzfList<CR>

nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

inoremap <expr><c-y> coc#_select_confirm()
inoremap <expr><c-n> coc#pum#visible() ? coc#pum#next(1): coc#refresh()
inoremap <expr><c-p> coc#pum#visible() ? coc#pum#prev(1): "\<c-p>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


endif
"## Advanced features end ##
call plug#end()


function! s:GoToWorkspace(directory)
    execute 'cd '.a:directory
    execute 'CocRestart'
    execute 'Files'
endfunction
command! Workspaces call fzf#run(fzf#wrap({
      \ 'source': 'zoxide query -l',
      \ 'sink': function('s:GoToWorkspace'),
      \ 'options': '--prompt "Workspace> " '
      \ }))


set termguicolors
colorscheme codedark
for g in ['Normal', 'EndOfBuffer', 'LineNr', "Directory"]
    exe "hi ".g." ctermbg=NONE guibg=NONE" | endfor
hi LineNr ctermfg=4
hi CursorLine ctermbg=237 guibg=#386641
hi StatusLine ctermbg=58 guibg=#6a994e
hi StatusLineNC ctermbg=244 guibg=#6d6875
hi Search ctermbg=240 guibg=#03045e
hi Visual ctermbg=240 guibg=#03045e
hi VisualNOS ctermbg=240 guibg=#03045e

