"if get(s:, 'loaded', 0) != 0 | finish | else | let s:loaded = 1 | endif
set encoding=utf-8 fileencodings=utf-8,ucs-bom,gbk,gb18030,big5,euc-jp,latin1
let mapleader = "\<space>"

set nocompatible hidden wrap
set hlsearch incsearch ignorecase smartcase
set backspace=indent,eol,start
set completeopt=menu,preview
set noswapfile nobackup nowritebackup
set cindent autoindent smartindent expandtab smarttab 
set nu signcolumn=number laststatus=1 mouse-=a cursorline
set wildignore+=.bak,*.swp,*.class,*.pyc,*DS_Store*,*.swp,*/.Trash/*
set updatetime=1000
set ts=4 sw=4 sts=4
set autoread t_Co=256
au FileType javascript,html,vue setlocal sw=2 ts=2 sts=2

syntax on
filetype plugin indent on
nnoremap <c-c> :q<cr>
nnoremap - :Explore<cr>
for [k, v] in items({"<c-b>": "<left>", "<c-f>": "<right>",
\"<c-a>": "<home>","<c-e>": "<end>", "<c-d>": "<del>"})
    exe "inoremap ".k." ".v | exe "cnoremap ".k." ".v
endfor

au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

call plug#begin('~/.vim/plugged')
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'jiangmiao/auto-pairs'
Plug '907th/vim-auto-save'
Plug 'sbdchd/neoformat'
nnoremap = :Neoformat<cr>
let g:neoformat_basic_format_align = 1
let g:neoformat_basic_format_trim = 1

let g:auto_save = 1
let g:netrw_dirhistmax = 0
let g:tmux_navigator_save_on_switch = 2

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
noremap  <c-e>      :<C-U>call fzf#vim#history()<CR>
noremap  <c-p>      :<C-U>call fzf#vim#files('')<CR>
nnoremap <leader>m  :<C-U>call fzf#vim#marks()<CR>
nnoremap <leader>t  :<C-U>BTags<CR>
nnoremap <leader>r  y:<C-U><C-R>=printf("Tags %s", expand("<cword>"))<CR>
nnoremap <leader>w  y:<C-U><C-R>=printf("Rg %s", expand("<cword>"))<CR>
nnoremap <leader>s  :<C-U><C-R>=printf("Rg ")<CR>
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_commits_log_options =  "-200 --color=always"
let g:fzf_preview_window = ['up:80%', 'ctrl-/']

Plug 'TovarishFin/vim-solidity'
Plug 'leafgarland/typescript-vim'



"## Advanced features ##
if get(g:, "feature_mode", "basic") != "basic"
Plug 'tomasiser/vim-code-dark'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = ["coc-go", "coc-pyright", "coc-typos", "coc-lists"]

" typos
nmap ]s <Plug>(coc-typos-next)
nmap [s <Plug>(coc-typos-prev)
nmap z= <Plug>(coc-typos-fix)

nnoremap K           :<C-u>call CocActionAsync('doHover')<CR>
nnoremap L           :<C-u>call CocActionAsync('showSignatureHelp')<CR>
nnoremap gt          :<C-u>call CocActionAsync('jumpTypeDefinition')<CR>
nnoremap gi          :<C-u>call CocActionAsync('jumpImplementation')<CR>
nnoremap gr          :<C-u>call CocActionAsync('jumpReferences')<CR>
nnoremap qf          :<C-u>call CocActionAsync('doQuickfix')<CR>
nnoremap gd          :<C-u>call CocActionAsync('jumpDefinition')<CR>
nnoremap <leader>rn   :<C-u>call CocActionAsync('rename')<CR>

noremap  <c-p>       :<C-u>CocList files<CR>
noremap  <c-e>       :<C-u>CocList mru<CR>
noremap  <leader>p   :<C-u>CocListResume<CR>

nnoremap <leader>m  :<C-U>CocList marks<CR>
nnoremap <leader>w  y:<C-U><C-R>=printf("CocList -A grep %s", expand("<cword>"))<CR>
nnoremap <leader>s  :<C-U><C-R>=printf("CocList -A grep ")<CR>
vnoremap <leader>s  y:<C-U><C-R>=printf("CocList -A grep %s", getreg('"'))<CR>
nnoremap <leader>h  :<C-U>CocList helptags<CR>

nnoremap <leader>a   :<C-u>CocList -A --normal diagnostics --current-buf<CR>
nnoremap <leader>t   :<C-u>CocList -A outline<CR>
nnoremap <leader>c   :<C-u>CocList commands<CR>
nnoremap <leader>j   :<C-u>CocList cmdhistory<CR>
nnoremap <leader>l   :<C-u>CocList<CR>

nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

inoremap <expr><c-y> coc#_select_confirm()
inoremap <expr><c-n> coc#pum#visible() ? coc#pum#next(1): coc#refresh()
inoremap <expr><c-p> coc#pum#visible() ? coc#pum#prev(1): "\<c-p>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

endif
"## Advanced features end ##

call plug#end()

colorscheme codedark

for g in ['Normal', 'EndOfBuffer', 'LineNr', "Directory"]
    exe "hi ".g." ctermbg=NONE guibg=NONE" | endfor
hi LineNr ctermfg=4
hi CursorLine ctermbg=237
hi StatusLine ctermbg=58
hi StatusLineNC ctermbg=238
hi Search ctermbg=240
hi Visual ctermbg=240
hi VisualNOS ctermbg=240

