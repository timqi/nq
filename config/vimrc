set encoding=utf-8
let mapleader = "\<space>"

set nocompatible hidden wrap
set hlsearch incsearch ignorecase smartcase
set backspace=indent,eol,start
set completeopt=menu,menuone,noselect
set noswapfile nobackup nowritebackup
set cindent autoindent smartindent expandtab smarttab
set nu signcolumn=number laststatus=1 cursorline ruler
set autoread autowrite mouse=a
set ts=4 sw=4 sts=4 scrolloff=3
set statusline=%F\ %h%w%m%r%=%-14.(%l/%L,%c%V%)\ %P
set wildignore+=.bak,*.swp,*.class,*.pyc,*DS_Store*,*.swp,

nnoremap <C-c> :q<CR>
nnoremap -     :Explore<CR>
nnoremap [q    :cprevious<CR>
nnoremap ]q    :cnext<CR>

inoremap <C-b> <left>
cnoremap <C-b> <left>
inoremap <C-f> <right>
cnoremap <C-f> <right>
inoremap <C-a> <home>
cnoremap <C-a> <home>
inoremap <C-e> <end>
cnoremap <C-e> <end>

nnoremap j gj
nnoremap k gk
vnoremap < <gv
vnoremap > >gv


let g:gutentags_enabled = 0
let g:gutentags_project_root = ['.root', '.git']
let g:gutentags_ctags_tagfile = '.tags'
let s:vim_tags = expand('~/.vim/tags')
let g:gutentags_cache_dir = s:vim_tags
let g:gutentags_modules = ['ctags']
let g:gutentags_exclude_filetypes = ['markdown']
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

nnoremap = :Neoformat<CR>
let g:neoformat_basic_format_align = 1
let g:neoformat_basic_format_trim = 1
let g:neoformat_python_black = {
    \ 'exe': 'black',
    \ 'stdin': 1,
    \ 'args': ['--line-length=120', "-q", "-"],
    \ }
let g:neoformat_python_iosrt = {
    \ 'exe': 'isort',
    \ 'args': ['--profile=black'],
    \ }
let g:neoformat_enabled_python = ['isort', 'black']
let g:neoformat_rust_rustfmt = {
    \ 'exe': 'rustfmt',
    \ 'args': ['--emit=stdout', '--edition=2021'],
    \ }

let g:auto_save = 1
let g:netrw_dirhistmax = 0

command! -bang -nargs=* FRg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case --fixed-strings -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

command! -bang -nargs=* BRg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case --fixed-strings -g '.shellescape(expand('%')).' -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

noremap  <c-p>      :<C-U>call fzf#vim#files('')<CR>
noremap  <leader>p  :<C-U>call fzf#vim#files('')<CR>
nnoremap <leader>e  :<C-U>call fzf#vim#history()<CR>
nnoremap <leader>m  :<C-U>call fzf#vim#marks()<CR>
nnoremap <leader>n  :<C-U>Commands<CR>
nnoremap <leader>t  :<C-U>BTags<CR>
nnoremap <leader>y  :<C-U>Tags<CR>
nnoremap <leader>h  :<C-U>Helptags<CR>
nnoremap <leader>r  y:<C-U><C-R>=printf("Tags %s", expand("<cword>"))<CR>
nnoremap <leader>w  y:<C-U><C-R>=printf("FRg %s", expand("<cword>"))<CR>
nnoremap <leader>b  y:<C-U><C-R>=printf("BRg %s", expand("<cword>"))<CR>
nnoremap <leader>s  :<C-U><C-R>=printf("FRg ")<CR>
nnoremap <leader>j  :History:<CR>
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_commits_log_options =  "-200 --color=always"
let g:fzf_preview_window = ['up:80%', 'ctrl-/']

function! s:GoToWorkspace(directory)
    execute 'cd '.a:directory
    execute 'Files'
    if exists(":CocRestart") | execute 'CocRestart' | endif
endfunction
command! Workspaces call fzf#run(fzf#wrap({
      \ 'source': 'zoxide query -l',
      \ 'sink': function('s:GoToWorkspace'),
      \ 'options': '--prompt "Workspace> " '
      \ }))

command! Lg execute '!tmux popup -d "\#{pane_current_path}" -xC -yC -w99\% -h99\% -E "zsh -i -c lazygit"'


" Custom scripts
function! CreatePlayGround(fileName)
    let l:directory = expand('~/.config/playground')
    if !isdirectory(l:directory)
        call mkdir(l:directory)
    endif
    let l:ext = fnamemodify(a:fileName, ':e')
    if index(["go", "py"], l:ext) < 0
        echo "Only go,py supported. You typed: ".l:ext
        return
    endif
    exe 'edit '.l:directory.'/'.a:fileName
endfunction
command! -nargs=1 CreatePlayGround call CreatePlayGround(<f-args>)


" Auto cmd group
augroup vimrc
    au FileType javascript,html,vue setlocal sw=2 ts=2 sts=2
    au FileType qf,git,term,fzf setlocal nonu nornu
    au FileType python let b:neoformat_run_all_formatters = 1
    au FileType fzf set laststatus=0 showmode noruler
        \| au BufLeave <buffer> set laststatus=1 noshowmode ruler
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal! g'\"" | endif
augroup END


" Theme
function! ApplyTheme()
    for g in ['Normal', 'EndOfBuffer', 'LineNr', "Directory"]
        exe "hi ".g." ctermbg=NONE guibg=NONE" | endfor
    hi clear CursorLine
    hi CursorLine ctermbg=237 guibg=#386641
    hi LineNr ctermfg=238 ctermbg=NONE guifg=#386641 guibg=NONE
    hi SpellBad ctermbg=17 guibg=#959595
    "hi StatusLine ctermbg=208 guibg=#6a994e
    "hi StatusLineNC ctermbg=94 guibg=#6d6875
    hi Search ctermbg=240 guibg=#03045e
    hi Visual ctermbg=240 guibg=#03045e
    hi VisualNOS ctermbg=240 guibg=#03045e
    hi PmenuSel ctermbg=22 ctermfg=255 guibg=#03045e guifg=#ffffff
endfunction
"colorscheme habamax
"call ApplyTheme()

let g:basic_plugins = [
    \ 'ludovicchabant/vim-gutentags',
    \ 'tpope/vim-commentary',
    \ 'tpope/vim-surround',
    \ 'jiangmiao/auto-pairs',
    \ '907th/vim-auto-save',
    \ 'sbdchd/neoformat',
    \ 'wellle/targets.vim',
    \ 'michaeljsmith/vim-indent-object',
    \]

if !has("nvim")
    set rtp+=~/.vim
    if empty(glob('~/.vim/autoload/plug.vim'))
        execute '!curl --silent -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    if !empty(glob($HOME..'/nq/bin'))
        let $PATH = $HOME..'/nq/bin:'..$PATH
    endif
    silent! call plug#begin('~/.vim/plugged')
    let g:basic_plugins += ['junegunn/fzf', 'junegunn/fzf.vim']
    for plugin in g:basic_plugins
        Plug plugin
    endfor
    silent! call plug#end()
    call ApplyTheme()
    finish
endif


lua <<EOF
local home_path = os.getenv("HOME")
vim.env.XDG_CONFIG_HOME = home_path.."/.vim/config"
vim.env.XDG_DATA_HOME = home_path.."/.vim/data"
vim.env.XDG_STATE_HOME = home_path.."/.vim/state"

local lazypath = home_path.."/.vim/plugged/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git", "clone", "--filter=blob:none",
        "https://github.com/folke/lazy.nvim.git",
        "--branch=stable", lazypath,
    }) end
vim.opt.rtp:prepend(lazypath)

local plugins = {}
table.foreach(vim.g.basic_plugins, function(_, plugin)
    -- table.insert(plugins, {plugin, event = "VeryLazy"})
    table.insert(plugins, {plugin})
end)

table.insert(plugins, {
    'nvim-treesitter/nvim-treesitter',
    config = function()
        require'nvim-treesitter.configs'.setup {
          ensure_installed = { "javascript", "go", "python" },
          sync_install = true,
          auto_install = true,
        }
    end
})

table.insert(plugins, {
    'Wansmer/treesj',
    dependencies = { 'nvim-treesitter/nvim-treesitter' },
    config = function()
        require('treesj').setup({
            check_syntax_error = false,
            se_default_keymaps = false,
            notify = false,
        })
    end,
})

table.insert(plugins, {
    "folke/tokyonight.nvim",
    lazy = false, priority = 1000,
    config = function()
        vim.cmd([[colorscheme tokyonight]])
    end,
})

table.insert(plugins, {
    "nvim-telescope/telescope.nvim",
    dependencies = { "nvim-lua/plenary.nvim", "nvim-telescope/telescope-ui-select.nvim" },
    config = function()
        local builtin = require("telescope.builtin")
        vim.keymap.set("n", "<c-p>", builtin.find_files, {})
        vim.keymap.set("n", "<leader>p", builtin.find_files, {})
        vim.keymap.set("n", "<leader>e", builtin.oldfiles, {})
        vim.keymap.set("n", "<leader>s", builtin.live_grep, {})
        vim.keymap.set("n", "<leader>w", builtin.grep_string, {})
        vim.keymap.set("n", "<leader>n", builtin.commands, {})
        vim.keymap.set("n", "<leader>m", builtin.marks, {})
        vim.keymap.set("n", "<leader>h", builtin.help_tags, {})
        vim.keymap.set("n", "<leader>y", builtin.tags, {})
        vim.keymap.set("n", "<leader>t", builtin.lsp_document_symbols, {})
        -- vim.keymap.set("n", "<leader>t", builtin.current_buffer_tags, {})
        require("telescope").setup({
            defaults = {
                layout_config = {},
            },
            extensions = {
                ["ui-select"] = {
                    require("telescope.themes").get_dropdown({}),
                },
            },
        })
        require("telescope").load_extension("ui-select")
    end,
})

table.insert(plugins, {
    "hrsh7th/nvim-cmp",
    event = "InsertEnter",
    dependencies = { "hrsh7th/cmp-nvim-lsp", "hrsh7th/cmp-buffer" },
    config = function()
        local cmp = require("cmp")
        cmp.setup({
            snippet = {
                expand = function(args)
                    vim.snippet.expand(args.body)
                end,
            },
            mapping = cmp.mapping.preset.insert({
                ["<S-up>"] = cmp.mapping.scroll_docs(-4),
                ["<S-down>"] = cmp.mapping.scroll_docs(4),
                ["<C-Space>"] = cmp.mapping.complete(),
                ["<C-e>"] = cmp.mapping.abort(),
                ["<CR>"] = cmp.mapping.confirm({ select = true }),
            }),
            sources = cmp.config.sources({
                { name = "nvim_lsp" },
            }, { { name = "buffer" } }),
        })
        cmp.setup.cmdline({ '/', '?' }, {
            mapping = cmp.mapping.preset.cmdline(),
            sources = {{ name = 'buffer' }}
        })
    end,
})

table.insert(plugins, {
    "neovim/nvim-lspconfig",
    event = "VeryLazy",
    ft = { "python", "go" },
    dependencies = {
        "williamboman/mason.nvim",
        "hrsh7th/nvim-cmp",
        "williamboman/mason-lspconfig.nvim",
        "nvim-lua/plenary.nvim",
    },
    config = function()
        require("mason").setup({})
        require("mason-lspconfig").setup({
            ensure_installed = { "pyright", "gopls" },
        })
        local lspconfig = require("lspconfig")
        local on_attach = function(client, bufnr)
            vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
            local bufopts = { noremap = true, silent = false, buffer = bufnr }
            vim.keymap.set("n", "gD", vim.lsp.buf.declaration, bufopts)
            vim.keymap.set("n", "gd", vim.lsp.buf.definition, bufopts)
            vim.keymap.set("n", "gk", vim.lsp.buf.hover, bufopts)
            vim.keymap.set("n", "gi", vim.lsp.buf.implementation, bufopts)
            vim.keymap.set("n", "gt", vim.lsp.buf.type_definition, bufopts)
            vim.keymap.set("n", "ga", vim.lsp.buf.rename, bufopts)
            vim.keymap.set("n", "ge", vim.lsp.buf.code_action, bufopts)
            vim.keymap.set("n", "gr", vim.lsp.buf.references, bufopts)
            -- vim.keymap.set({ "i", "n" }, "<c-p>", vim.lsp.buf.signature_help, bufopts)
        end
        local lsp_flags = { debounce_text_changes = 150 }
        local cmp_capabilities = require("cmp_nvim_lsp").default_capabilities()
        lspconfig["gopls"].setup({ on_attach = on_attach, flags = lsp_flags, capabilities = cmp_capabilities })
        lspconfig["pyright"].setup({
            on_attach = on_attach,
            flags = lsp_flags,
            capabilities = cmp_capabilities,
            settings = {
                python = {
                    analysis = {
                        reportOptionalSubscript = "none",
                        reportGeneralTypeIssues = "none",
                        reportOptionalOperand = "warning",
                        reportOptionalMemberAccess = "none",
                    },
                },
            },
        })
    end,
})

function setup()
    require("lazy").setup(plugins, {
        root = home_path.."/.vim/plugged",
        performance = {rtp = {disabled_plugins = {
            "tutor", "gzip", "tarPlugin", "zipPlugin", "tohtml"
        }}}
    })
end
setup()
EOF
